// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_society`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
<<<<<<< HEAD
//! DATE: 2024-11-08, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `runner-wiukf8gn-project-674-concurrent-0`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`
=======
//! DATE: 2025-03-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `0848bec9fe49`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))

// Executed Command:
// ./target/production/substrate-node
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_society
// --no-storage-info
// --no-median-slopes
<<<<<<< HEAD
// --no-min-squares
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./substrate/frame/society/src/weights.rs
// --header=./substrate/HEADER-APACHE2
// --template=./substrate/.maintain/frame-weight-template.hbs
=======
// --exclude-pallets=pallet_xcm,pallet_xcm_benchmarks::fungible,pallet_xcm_benchmarks::generic,pallet_nomination_pools,pallet_remark,pallet_transaction_storage,pallet_election_provider_multi_block,pallet_election_provider_multi_block::signed,pallet_election_provider_multi_block::unsigned,pallet_election_provider_multi_block::verifier
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_society`.
pub trait WeightInfo {
	fn bid() -> Weight;
	fn unbid() -> Weight;
	fn vouch() -> Weight;
	fn unvouch() -> Weight;
	fn vote() -> Weight;
	fn defender_vote() -> Weight;
	fn payout() -> Weight;
	fn waive_repay() -> Weight;
	fn found_society() -> Weight;
	fn dissolve() -> Weight;
	fn judge_suspended_member() -> Weight;
	fn set_parameters() -> Weight;
	fn punish_skeptic() -> Weight;
	fn claim_membership() -> Weight;
	fn bestow_membership() -> Weight;
	fn kick_candidate() -> Weight;
	fn resign_candidacy() -> Weight;
	fn drop_candidate() -> Weight;
	fn cleanup_candidacy() -> Weight;
	fn cleanup_challenge() -> Weight;
	fn poke_deposit() -> Weight;
}

/// Weights for `pallet_society` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:1 w:0)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::SuspendedMembers` (r:1 w:0)
	/// Proof: `Society::SuspendedMembers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `444`
<<<<<<< HEAD
		//  Estimated: `3909`
		// Minimum execution time: 37_812_000 picoseconds.
		Weight::from_parts(38_375_000, 3909)
=======
		//  Estimated: `3591`
		// Minimum execution time: 37_702_000 picoseconds.
		Weight::from_parts(38_951_000, 3591)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn unbid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `461`
<<<<<<< HEAD
		//  Estimated: `1946`
		// Minimum execution time: 28_526_000 picoseconds.
		Weight::from_parts(29_680_000, 1946)
=======
		//  Estimated: `2456`
		// Minimum execution time: 28_427_000 picoseconds.
		Weight::from_parts(29_573_000, 2456)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:1 w:0)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:2 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::SuspendedMembers` (r:1 w:0)
	/// Proof: `Society::SuspendedMembers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vouch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `481`
<<<<<<< HEAD
		//  Estimated: `6421`
		// Minimum execution time: 28_051_000 picoseconds.
		Weight::from_parts(29_088_000, 6421)
=======
		//  Estimated: `6048`
		// Minimum execution time: 28_040_000 picoseconds.
		Weight::from_parts(29_063_000, 6048)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unvouch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `535`
<<<<<<< HEAD
		//  Estimated: `4000`
		// Minimum execution time: 20_861_000 picoseconds.
		Weight::from_parts(21_379_000, 4000)
=======
		//  Estimated: `3519`
		// Minimum execution time: 20_480_000 picoseconds.
		Weight::from_parts(23_171_000, 3519)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Votes` (r:1 w:1)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `569`
<<<<<<< HEAD
		//  Estimated: `4034`
		// Minimum execution time: 27_803_000 picoseconds.
		Weight::from_parts(28_621_000, 4034)
=======
		//  Estimated: `3591`
		// Minimum execution time: 27_478_000 picoseconds.
		Weight::from_parts(28_524_000, 3591)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Defending` (r:1 w:1)
	/// Proof: `Society::Defending` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::ChallengeRoundCount` (r:1 w:0)
	/// Proof: `Society::ChallengeRoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::DefenderVotes` (r:1 w:1)
	/// Proof: `Society::DefenderVotes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn defender_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `561`
<<<<<<< HEAD
		//  Estimated: `4026`
		// Minimum execution time: 24_774_000 picoseconds.
		Weight::from_parts(26_040_000, 4026)
=======
		//  Estimated: `3522`
		// Minimum execution time: 24_458_000 picoseconds.
		Weight::from_parts(25_690_000, 3522)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Payouts` (r:1 w:1)
	/// Proof: `Society::Payouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn payout() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `687`
<<<<<<< HEAD
		//  Estimated: `4152`
		// Minimum execution time: 58_072_000 picoseconds.
		Weight::from_parts(59_603_000, 4152)
=======
		//  Estimated: `3722`
		// Minimum execution time: 56_406_000 picoseconds.
		Weight::from_parts(65_030_000, 3722)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Members` (r:1 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Payouts` (r:1 w:1)
	/// Proof: `Society::Payouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn waive_repay() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `547`
<<<<<<< HEAD
		//  Estimated: `4012`
		// Minimum execution time: 24_809_000 picoseconds.
		Weight::from_parts(25_927_000, 4012)
=======
		//  Estimated: `3722`
		// Minimum execution time: 24_846_000 picoseconds.
		Weight::from_parts(25_812_000, 3722)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Head` (r:1 w:1)
	/// Proof: `Society::Head` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberByIndex` (r:0 w:1)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Founder` (r:0 w:1)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Rules` (r:0 w:1)
	/// Proof: `Society::Rules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:0 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:0 w:1)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn found_society() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
<<<<<<< HEAD
		//  Estimated: `1665`
		// Minimum execution time: 15_541_000 picoseconds.
		Weight::from_parts(15_950_000, 1665)
=======
		//  Estimated: `1517`
		// Minimum execution time: 15_931_000 picoseconds.
		Weight::from_parts(16_622_000, 1517)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:1)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:5 w:5)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberByIndex` (r:5 w:5)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Votes` (r:4 w:4)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:4 w:4)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Head` (r:0 w:1)
	/// Proof: `Society::Head` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Defending` (r:0 w:1)
	/// Proof: `Society::Defending` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::ChallengeRoundCount` (r:0 w:1)
	/// Proof: `Society::ChallengeRoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Skeptic` (r:0 w:1)
	/// Proof: `Society::Skeptic` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Pot` (r:0 w:1)
	/// Proof: `Society::Pot` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Rules` (r:0 w:1)
	/// Proof: `Society::Rules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:0 w:1)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Bids` (r:0 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:0 w:1)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::NextHead` (r:0 w:1)
	/// Proof: `Society::NextHead` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn dissolve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1654`
<<<<<<< HEAD
		//  Estimated: `15019`
		// Minimum execution time: 62_275_000 picoseconds.
		Weight::from_parts(64_251_000, 15019)
=======
		//  Estimated: `13635`
		// Minimum execution time: 65_898_000 picoseconds.
		Weight::from_parts(69_842_000, 13635)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().writes(30_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::SuspendedMembers` (r:1 w:1)
	/// Proof: `Society::SuspendedMembers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Payouts` (r:1 w:0)
	/// Proof: `Society::Payouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Pot` (r:1 w:1)
	/// Proof: `Society::Pot` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn judge_suspended_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
<<<<<<< HEAD
		//  Estimated: `3970`
		// Minimum execution time: 25_561_000 picoseconds.
		Weight::from_parts(26_796_000, 3970)
=======
		//  Estimated: `3722`
		// Minimum execution time: 25_659_000 picoseconds.
		Weight::from_parts(26_456_000, 3722)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:0)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:0 w:1)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_parameters() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `387`
<<<<<<< HEAD
		//  Estimated: `1872`
		// Minimum execution time: 12_183_000 picoseconds.
		Weight::from_parts(12_813_000, 1872)
=======
		//  Estimated: `1517`
		// Minimum execution time: 12_063_000 picoseconds.
		Weight::from_parts(13_035_000, 1517)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Skeptic` (r:1 w:0)
	/// Proof: `Society::Skeptic` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Votes` (r:1 w:0)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn punish_skeptic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `636`
<<<<<<< HEAD
		//  Estimated: `4101`
		// Minimum execution time: 30_355_000 picoseconds.
		Weight::from_parts(31_281_000, 4101)
=======
		//  Estimated: `3591`
		// Minimum execution time: 29_789_000 picoseconds.
		Weight::from_parts(30_860_000, 3591)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::NextHead` (r:1 w:1)
	/// Proof: `Society::NextHead` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Society::MemberByIndex` (r:0 w:1)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:0 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn claim_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `632`
<<<<<<< HEAD
		//  Estimated: `4097`
		// Minimum execution time: 43_935_000 picoseconds.
		Weight::from_parts(45_511_000, 4097)
=======
		//  Estimated: `3593`
		// Minimum execution time: 43_192_000 picoseconds.
		Weight::from_parts(44_463_000, 3593)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::NextHead` (r:1 w:1)
	/// Proof: `Society::NextHead` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Society::MemberByIndex` (r:0 w:1)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:0 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn bestow_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `650`
<<<<<<< HEAD
		//  Estimated: `4115`
		// Minimum execution time: 46_043_000 picoseconds.
		Weight::from_parts(47_190_000, 4115)
=======
		//  Estimated: `3593`
		// Minimum execution time: 44_050_000 picoseconds.
		Weight::from_parts(46_458_000, 3593)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn kick_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `776`
		//  Estimated: `6196`
<<<<<<< HEAD
		// Minimum execution time: 46_161_000 picoseconds.
		Weight::from_parts(47_207_000, 6196)
=======
		// Minimum execution time: 45_018_000 picoseconds.
		Weight::from_parts(46_785_000, 6196)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn resign_candidacy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `746`
		//  Estimated: `6196`
<<<<<<< HEAD
		// Minimum execution time: 43_176_000 picoseconds.
		Weight::from_parts(44_714_000, 6196)
=======
		// Minimum execution time: 42_297_000 picoseconds.
		Weight::from_parts(43_475_000, 6196)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn drop_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `758`
		//  Estimated: `6196`
<<<<<<< HEAD
		// Minimum execution time: 43_972_000 picoseconds.
		Weight::from_parts(45_094_000, 6196)
=======
		// Minimum execution time: 42_533_000 picoseconds.
		Weight::from_parts(44_355_000, 6196)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:0)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::VoteClearCursor` (r:1 w:0)
	/// Proof: `Society::VoteClearCursor` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Votes` (r:2 w:2)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cleanup_candidacy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `552`
<<<<<<< HEAD
		//  Estimated: `6492`
		// Minimum execution time: 19_900_000 picoseconds.
		Weight::from_parts(20_940_000, 6492)
=======
		//  Estimated: `6110`
		// Minimum execution time: 20_326_000 picoseconds.
		Weight::from_parts(21_079_000, 6110)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::ChallengeRoundCount` (r:1 w:0)
	/// Proof: `Society::ChallengeRoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::DefenderVotes` (r:1 w:1)
	/// Proof: `Society::DefenderVotes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cleanup_challenge() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `510`
<<<<<<< HEAD
		//  Estimated: `3975`
		// Minimum execution time: 14_358_000 picoseconds.
		Weight::from_parts(15_014_000, 3975)
=======
		//  Estimated: `3522`
		// Minimum execution time: 13_993_000 picoseconds.
		Weight::from_parts(14_622_000, 3522)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: Some(971), added: 1466, mode: `MaxEncodedLen`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: Some(28), added: 523, mode: `MaxEncodedLen`)
	fn poke_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `475`
		//  Estimated: `2456`
		// Minimum execution time: 30_463_000 picoseconds.
		Weight::from_parts(31_422_000, 2456)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:1 w:0)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::SuspendedMembers` (r:1 w:0)
	/// Proof: `Society::SuspendedMembers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `444`
<<<<<<< HEAD
		//  Estimated: `3909`
		// Minimum execution time: 37_812_000 picoseconds.
		Weight::from_parts(38_375_000, 3909)
=======
		//  Estimated: `3591`
		// Minimum execution time: 37_702_000 picoseconds.
		Weight::from_parts(38_951_000, 3591)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn unbid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `461`
<<<<<<< HEAD
		//  Estimated: `1946`
		// Minimum execution time: 28_526_000 picoseconds.
		Weight::from_parts(29_680_000, 1946)
=======
		//  Estimated: `2456`
		// Minimum execution time: 28_427_000 picoseconds.
		Weight::from_parts(29_573_000, 2456)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:1 w:0)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:2 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::SuspendedMembers` (r:1 w:0)
	/// Proof: `Society::SuspendedMembers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vouch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `481`
<<<<<<< HEAD
		//  Estimated: `6421`
		// Minimum execution time: 28_051_000 picoseconds.
		Weight::from_parts(29_088_000, 6421)
=======
		//  Estimated: `6048`
		// Minimum execution time: 28_040_000 picoseconds.
		Weight::from_parts(29_063_000, 6048)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unvouch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `535`
<<<<<<< HEAD
		//  Estimated: `4000`
		// Minimum execution time: 20_861_000 picoseconds.
		Weight::from_parts(21_379_000, 4000)
=======
		//  Estimated: `3519`
		// Minimum execution time: 20_480_000 picoseconds.
		Weight::from_parts(23_171_000, 3519)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Votes` (r:1 w:1)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `569`
<<<<<<< HEAD
		//  Estimated: `4034`
		// Minimum execution time: 27_803_000 picoseconds.
		Weight::from_parts(28_621_000, 4034)
=======
		//  Estimated: `3591`
		// Minimum execution time: 27_478_000 picoseconds.
		Weight::from_parts(28_524_000, 3591)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Defending` (r:1 w:1)
	/// Proof: `Society::Defending` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::ChallengeRoundCount` (r:1 w:0)
	/// Proof: `Society::ChallengeRoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::DefenderVotes` (r:1 w:1)
	/// Proof: `Society::DefenderVotes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn defender_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `561`
<<<<<<< HEAD
		//  Estimated: `4026`
		// Minimum execution time: 24_774_000 picoseconds.
		Weight::from_parts(26_040_000, 4026)
=======
		//  Estimated: `3522`
		// Minimum execution time: 24_458_000 picoseconds.
		Weight::from_parts(25_690_000, 3522)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Members` (r:1 w:0)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Payouts` (r:1 w:1)
	/// Proof: `Society::Payouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn payout() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `687`
<<<<<<< HEAD
		//  Estimated: `4152`
		// Minimum execution time: 58_072_000 picoseconds.
		Weight::from_parts(59_603_000, 4152)
=======
		//  Estimated: `3722`
		// Minimum execution time: 56_406_000 picoseconds.
		Weight::from_parts(65_030_000, 3722)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Members` (r:1 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Payouts` (r:1 w:1)
	/// Proof: `Society::Payouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn waive_repay() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `547`
<<<<<<< HEAD
		//  Estimated: `4012`
		// Minimum execution time: 24_809_000 picoseconds.
		Weight::from_parts(25_927_000, 4012)
=======
		//  Estimated: `3722`
		// Minimum execution time: 24_846_000 picoseconds.
		Weight::from_parts(25_812_000, 3722)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Head` (r:1 w:1)
	/// Proof: `Society::Head` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberByIndex` (r:0 w:1)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Founder` (r:0 w:1)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Rules` (r:0 w:1)
	/// Proof: `Society::Rules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:0 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:0 w:1)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn found_society() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
<<<<<<< HEAD
		//  Estimated: `1665`
		// Minimum execution time: 15_541_000 picoseconds.
		Weight::from_parts(15_950_000, 1665)
=======
		//  Estimated: `1517`
		// Minimum execution time: 15_931_000 picoseconds.
		Weight::from_parts(16_622_000, 1517)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:1)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:5 w:5)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberByIndex` (r:5 w:5)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Votes` (r:4 w:4)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:4 w:4)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Head` (r:0 w:1)
	/// Proof: `Society::Head` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Defending` (r:0 w:1)
	/// Proof: `Society::Defending` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::ChallengeRoundCount` (r:0 w:1)
	/// Proof: `Society::ChallengeRoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Skeptic` (r:0 w:1)
	/// Proof: `Society::Skeptic` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Pot` (r:0 w:1)
	/// Proof: `Society::Pot` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Rules` (r:0 w:1)
	/// Proof: `Society::Rules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:0 w:1)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Bids` (r:0 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:0 w:1)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::NextHead` (r:0 w:1)
	/// Proof: `Society::NextHead` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn dissolve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1654`
<<<<<<< HEAD
		//  Estimated: `15019`
		// Minimum execution time: 62_275_000 picoseconds.
		Weight::from_parts(64_251_000, 15019)
=======
		//  Estimated: `13635`
		// Minimum execution time: 65_898_000 picoseconds.
		Weight::from_parts(69_842_000, 13635)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(20_u64))
			.saturating_add(RocksDbWeight::get().writes(30_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::SuspendedMembers` (r:1 w:1)
	/// Proof: `Society::SuspendedMembers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Payouts` (r:1 w:0)
	/// Proof: `Society::Payouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Pot` (r:1 w:1)
	/// Proof: `Society::Pot` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn judge_suspended_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
<<<<<<< HEAD
		//  Estimated: `3970`
		// Minimum execution time: 25_561_000 picoseconds.
		Weight::from_parts(26_796_000, 3970)
=======
		//  Estimated: `3722`
		// Minimum execution time: 25_659_000 picoseconds.
		Weight::from_parts(26_456_000, 3722)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:0)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:0 w:1)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_parameters() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `387`
<<<<<<< HEAD
		//  Estimated: `1872`
		// Minimum execution time: 12_183_000 picoseconds.
		Weight::from_parts(12_813_000, 1872)
=======
		//  Estimated: `1517`
		// Minimum execution time: 12_063_000 picoseconds.
		Weight::from_parts(13_035_000, 1517)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Skeptic` (r:1 w:0)
	/// Proof: `Society::Skeptic` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Votes` (r:1 w:0)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:1 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn punish_skeptic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `636`
<<<<<<< HEAD
		//  Estimated: `4101`
		// Minimum execution time: 30_355_000 picoseconds.
		Weight::from_parts(31_281_000, 4101)
=======
		//  Estimated: `3591`
		// Minimum execution time: 29_789_000 picoseconds.
		Weight::from_parts(30_860_000, 3591)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::NextHead` (r:1 w:1)
	/// Proof: `Society::NextHead` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Society::MemberByIndex` (r:0 w:1)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:0 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn claim_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `632`
<<<<<<< HEAD
		//  Estimated: `4097`
		// Minimum execution time: 43_935_000 picoseconds.
		Weight::from_parts(45_511_000, 4097)
=======
		//  Estimated: `3593`
		// Minimum execution time: 43_192_000 picoseconds.
		Weight::from_parts(44_463_000, 3593)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::MemberCount` (r:1 w:1)
	/// Proof: `Society::MemberCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::NextHead` (r:1 w:1)
	/// Proof: `Society::NextHead` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Society::MemberByIndex` (r:0 w:1)
	/// Proof: `Society::MemberByIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Members` (r:0 w:1)
	/// Proof: `Society::Members` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn bestow_membership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `650`
<<<<<<< HEAD
		//  Estimated: `4115`
		// Minimum execution time: 46_043_000 picoseconds.
		Weight::from_parts(47_190_000, 4115)
=======
		//  Estimated: `3593`
		// Minimum execution time: 44_050_000 picoseconds.
		Weight::from_parts(46_458_000, 3593)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Society::Founder` (r:1 w:0)
	/// Proof: `Society::Founder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn kick_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `776`
		//  Estimated: `6196`
<<<<<<< HEAD
		// Minimum execution time: 46_161_000 picoseconds.
		Weight::from_parts(47_207_000, 6196)
=======
		// Minimum execution time: 45_018_000 picoseconds.
		Weight::from_parts(46_785_000, 6196)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn resign_candidacy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `746`
		//  Estimated: `6196`
<<<<<<< HEAD
		// Minimum execution time: 43_176_000 picoseconds.
		Weight::from_parts(44_714_000, 6196)
=======
		// Minimum execution time: 42_297_000 picoseconds.
		Weight::from_parts(43_475_000, 6196)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:1)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::RoundCount` (r:1 w:0)
	/// Proof: `Society::RoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn drop_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `758`
		//  Estimated: `6196`
<<<<<<< HEAD
		// Minimum execution time: 43_972_000 picoseconds.
		Weight::from_parts(45_094_000, 6196)
=======
		// Minimum execution time: 42_533_000 picoseconds.
		Weight::from_parts(44_355_000, 6196)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Society::Candidates` (r:1 w:0)
	/// Proof: `Society::Candidates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::VoteClearCursor` (r:1 w:0)
	/// Proof: `Society::VoteClearCursor` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Society::Votes` (r:2 w:2)
	/// Proof: `Society::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cleanup_candidacy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `552`
<<<<<<< HEAD
		//  Estimated: `6492`
		// Minimum execution time: 19_900_000 picoseconds.
		Weight::from_parts(20_940_000, 6492)
=======
		//  Estimated: `6110`
		// Minimum execution time: 20_326_000 picoseconds.
		Weight::from_parts(21_079_000, 6110)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Society::ChallengeRoundCount` (r:1 w:0)
	/// Proof: `Society::ChallengeRoundCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Society::DefenderVotes` (r:1 w:1)
	/// Proof: `Society::DefenderVotes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cleanup_challenge() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `510`
<<<<<<< HEAD
		//  Estimated: `3975`
		// Minimum execution time: 14_358_000 picoseconds.
		Weight::from_parts(15_014_000, 3975)
=======
		//  Estimated: `3522`
		// Minimum execution time: 13_993_000 picoseconds.
		Weight::from_parts(14_622_000, 3522)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Society::Bids` (r:1 w:1)
	/// Proof: `Society::Bids` (`max_values`: Some(1), `max_size`: Some(971), added: 1466, mode: `MaxEncodedLen`)
	/// Storage: `Society::Parameters` (r:1 w:0)
	/// Proof: `Society::Parameters` (`max_values`: Some(1), `max_size`: Some(28), added: 523, mode: `MaxEncodedLen`)
	fn poke_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `475`
		//  Estimated: `2456`
		// Minimum execution time: 30_463_000 picoseconds.
		Weight::from_parts(31_422_000, 2456)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
