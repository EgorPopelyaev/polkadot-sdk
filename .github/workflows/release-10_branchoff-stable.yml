name: Release - Branch off stable branch and tag rc

on:
  workflow_dispatch:
    inputs:
      stable_version:
        description: New stable version in the format stableYYMM
        required: true
        type: string

      node_version:
        description: Version of the polkadot node in the format X.XX.X (e.g. 1.15.0)
        required: true

      is_new_stable:
        description: Define if this is a new stable release and the stable branch needs to be created
        required: true
        type: boolean

      tag_rc:
        description: Define if the rc tag needs to be created
        required: true
        type: boolean

jobs:
  prepare-tooling:
    runs-on: ubuntu-latest
    outputs:
      node_version: ${{ steps.validate_inputs.outputs.node_version }}
      stable_version: ${{ steps.validate_inputs.outputs.stable_version }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@6d193bf28034eafb982f37bd894289fe649468fc # v4.1.7

      - name: Validate inputs
        id: validate_inputs
        run: |
          . ./.github/scripts/common/lib.sh

          node_version=$(filter_version_from_input "${{ inputs.node_version }}")
          echo "node_version=${node_version}" >> $GITHUB_OUTPUT

          stable_version=$(validate_stable_tag ${{ inputs.stable_version }})
          echo "stable_version=${stable_version}" >> $GITHUB_OUTPUT

  create-stable-branch:
      if: ${{ inputs.is_new_stable }}
      needs: [ prepare-tooling ]
      runs-on: ubuntu-latest
      environment: release
      env:
        PGP_KMS_KEY: ${{ secrets.PGP_KMS_SIGN_COMMITS_KEY }}
        PGP_KMS_HASH: ${{ secrets.PGP_KMS_HASH }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        STABLE_BRANCH_NAME: ${{ needs.prepare-tooling.outputs.stable_version }}

      steps:
        - name: Install pgpkkms
          run: |
            # Install pgpkms that is used to sign commits
            pip install git+https://github.com/paritytech-release/pgpkms.git@e7f806f99e9be5c52f0b4a536b7d4ef9c3e695ed

        - name: Generate content write token for the release automation
          id: generate_write_token
          uses: actions/create-github-app-token@v1
          with: #todo: change when tested!
              app-id: ${{ secrets.RELEASE_BACKPORT_AUTOMATION_APP_ID }}
              private-key: ${{ secrets.RELEASE_BACKPORT_AUTOMATION_APP_PRIVATE_KEY }}
              owner: EgorPopelyaev

        - name: Checkout sources
          uses: actions/checkout@6d193bf28034eafb982f37bd894289fe649468fc # v4.1.7
          with:
            ref: master
            token: ${{ steps.generate_write_token.outputs.token }}

        - name: Import gpg keys
          run: |
            . ./.github/scripts/common/lib.sh

            import_gpg_keys

        - name: Config git
          run: |
            git config --global commit.gpgsign true
            git config --global gpg.program /home/runner/.local/bin/pgpkms-git
            git config --global user.name "ParityReleases"
            git config --global user.email "release-team@parity.io"
            git config --global user.signingKey "D8018FBB3F534D866A45998293C5FB5F6A367B51"

        - name: Create stable branch
          run: |
            git checkout -b "$STABLE_BRANCH_NAME"
            git show-ref "$STABLE_BRANCH_NAME"

        - name: Bump versions, reorder prdocs and push stable branch
          env:
            GH_TOKEN: ${{ steps.generate_write_token.outputs.token }}
          run: |
            . ./.github/scripts/release/release_lib.sh

            NODE_VERSION="${{ needs.prepare-tooling.outputs.node_version }}"
            NODE_VERSION_PATTERN="\(NODE_VERSION[^=]*= \)\".*\""
            set_version "$NODE_VERSION_PATTERN" $NODE_VERSION "polkadot/node/primitives/src/lib.rs"
            commit_with_message "Bump node version to $NODE_VERSION in polkadot-cli"
            set_version "$NODE_VERSION_PATTERN" $NODE_VERSION "cumulus/polkadot-omni-node/lib/src/nodes/mod.rs"
            commit_with_message "Bump node version to $NODE_VERSION in polkadot-omni-node-lib"

            SPEC_VERSION=$(get_spec_version $NODE_VERSION)
            runtimes_list=$(get_filtered_runtimes_list)
            set_spec_versions $SPEC_VERSION "${runtimes_list[@]}"

            reorder_prdocs $STABLE_BRANCH_NAME

            gh auth setup-git

            git push origin "$STABLE_BRANCH_NAME"

  tag_rc:
    if: ${{ inputs.tag_rc }}
    needs: [ prepare-tooling ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        channel:
          - name: "RelEng: Polkadot Release Coordination"
            room: '!cqAmzdIcbOFwrdrubV:parity.io'
    environment: release
    env:
      PGP_KMS_KEY: ${{ secrets.PGP_KMS_SIGN_COMMITS_KEY }}
      PGP_KMS_HASH: ${{ secrets.PGP_KMS_HASH }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

    steps:
      - name: Install pgpkkms
        run: |
          # Install pgpkms that is used to sign commits
          pip install git+https://github.com/paritytech-release/pgpkms.git@e7f806f99e9be5c52f0b4a536b7d4ef9c3e695ed

      - name: Generate content write token for the release automation
        id: generate_write_token
        uses: actions/create-github-app-token@v1
        with: #todo: change when tested!
            app-id: ${{ secrets.RELEASE_BACKPORT_AUTOMATION_APP_ID }}
            private-key: ${{ secrets.RELEASE_BACKPORT_AUTOMATION_APP_PRIVATE_KEY }}
            owner: EgorPopelyaev

      - name: Checkout sources
        uses: actions/checkout@6d193bf28034eafb982f37bd894289fe649468fc # v4.1.7
        with:
          fetch-depth: 0
          token: ${{ steps.generate_write_token.outputs.token }}

      - name: Import gpg keys
        run: |
          . ./.github/scripts/common/lib.sh

          import_gpg_keys

      - name: Config git
        run: |
          git config --global commit.gpgsign true
          git config --global gpg.program /home/runner/.local/bin/pgpkms-git
          git config --global user.name "ParityReleases"
          git config --global user.email "release-team@parity.io"
          git config --global user.signingKey "D8018FBB3F534D866A45998293C5FB5F6A367B51"

      - name: Compute next rc tag
        # if: ${{ steps.get_rel_product.outputs.product == 'polkadot' }}
        id: compute_tag
        shell: bash
        run: |
          . ./.github/scripts/common/lib.sh

          # Get last rc tag if exists, else set it to {version}-rc1
          if [[ -z "${{ inputs.stable_version }}" ]]; then
            version=v$(get_polkadot_node_version_from_code)
          else
            stable_tag_base=polkadot-${{ inputs.stable_version }}
            version=$(validate_stable_tag ${stable_tag_base})
          fi
          echo "$version"
          echo "version=$version" >> $GITHUB_OUTPUT

          last_rc=$(get_latest_rc_tag $version polkadot)

          if [ -n "$last_rc" ]; then
            suffix=$(increment_rc_tag $last_rc)
            echo "new_tag=$version-rc$suffix" >> $GITHUB_OUTPUT
            echo "first_rc=false" >> $GITHUB_OUTPUT
          else
            echo "new_tag=$version-rc1" >> $GITHUB_OUTPUT
            echo "first_rc=true" >> $GITHUB_OUTPUT
          fi

      - name: Apply new tag
        env:
          GH_TOKEN: ${{ steps.generate_write_token.outputs.token }}
          RC_TAG: ${{ steps.compute_tag.outputs.new_tag }}
        run: |
         git tag -s $RC_TAG -m "new rc tag $RC_TAG"
         git push origin $RC_TAG

      - name: Send Matrix message to ${{ matrix.channel.name }}
        uses: s3krit/matrix-message-action@70ad3fb812ee0e45ff8999d6af11cafad11a6ecf # v0.0.3
        # if: steps.create-issue.outputs.url != ''
        with:
          room_id: ${{ matrix.channel.room }}
          access_token: ${{ secrets.RELEASENOTES_MATRIX_V2_ACCESS_TOKEN }}
          server: m.parity.io
          message: |
            Release process for polkadot ${{ steps.compute_tag.outputs.new_tag }} has been started.<br/>
