name: Release - Build Runtimes and RC

on:
  workflow_dispatch:
    inputs:
      chain:
        description: The chain to use
        default: all
        required: true
        type: choice
        options:
          - all
          - westend
          - asset-hub-westend
          - bridge-hub-westend
          - collectives-westend
          - coretime-westend
          - glutton-westend
          - people-westend
      runtime_dir:
        description: The runtime_dir to be used (this parameter is optional and needed only in case of the single runtime build, set it accordingly to the runtime you want to build)
        default: polkadot/runtime/westend
      binary:
        description: Binary to be build for the release
        default: all
        type: choice
        options:
          - polkadot
          - polkadot-parachain
          - polkadot-omni-node
          - frame-omni-bencher
          - chain-spec-builder
          - substrate-node
          - eth-rpc
          - all
      release_tag:
        description: Tag matching the actual release candidate with the format polkadot-stableYYMM(-X)-rcX or polkadot-stableYYMM(-X)
        type: string
        required: true

jobs:
  check-synchronization:
    uses: paritytech-release/sync-workflows/.github/workflows/check-synchronization.yml@main
    secrets:
      fork_writer_app_key: ${{ secrets.UPSTREAM_CONTENT_SYNC_APP_KEY }}

  validate-inputs:
    needs: [check-synchronization]
    if: ${{ needs.check-synchronization.outputs.checks_passed }} == 'true'
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.validate_inputs.outputs.release_tag }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      - name: Validate inputs
        id: validate_inputs
        run: |
          . ./.github/scripts/common/lib.sh

          RELEASE_TAG=$(validate_stable_tag ${{ inputs.release_tag }})
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT

  build-runtimes:
    needs: [validate-inputs]
    uses: "./.github/workflows/release-srtool.yml"
    with:
       excluded_runtimes: "asset-hub-rococo bridge-hub-rococo coretime-rococo people-rococo rococo rococo-parachain substrate-test bp cumulus-test kitchensink minimal-template parachain-template penpal polkadot-test seedling shell frame-try sp solochain-template polkadot-sdk-docs-first pallet-staking-async-parachain pallet-staking-async-rc frame-storage-access-test yet-another-parachain revive-dev"
       build_opts: "--features on-chain-release-build"
       profile: production
       chain: ${{ inputs.chain }}
       runtime_dir: ${{ inputs.runtime_dir }}
    permissions:
      id-token: write
      attestations: write
      contents: read

  build-polkadot-binary:
    needs: [validate-inputs]
    if: ${{ inputs.binary == 'polkadot' || inputs.binary == 'all' }}
    uses: "./.github/workflows/release-reusable-rc-build.yml"
    with:
      binary: '["polkadot", "polkadot-prepare-worker", "polkadot-execute-worker"]'
      package: polkadot
      release_tag: ${{ needs.validate-inputs.outputs.release_tag }}
      target: x86_64-unknown-linux-gnu
    secrets:
      PGP_KMS_KEY:  ${{ secrets.PGP_KMS_KEY }}
      PGP_KMS_HASH:  ${{ secrets.PGP_KMS_HASH }}
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_RELEASE_ACCESS_KEY_ID: ${{ secrets.AWS_RELEASE_ACCESS_KEY_ID }}
      AWS_RELEASE_SECRET_ACCESS_KEY: ${{ secrets.AWS_RELEASE_SECRET_ACCESS_KEY }}
    permissions:
      id-token: write
      attestations: write
      contents: read

  build-polkadot-parachain-binary:
    needs: [validate-inputs]
    if: ${{ inputs.binary == 'polkadot-parachain' || inputs.binary == 'all' }}
    uses: "./.github/workflows/release-reusable-rc-build.yml"
    with:
      binary: '["polkadot-parachain"]'
      package: "polkadot-parachain-bin"
      release_tag: ${{ needs.validate-inputs.outputs.release_tag }}
      target: x86_64-unknown-linux-gnu
    secrets:
      PGP_KMS_KEY:  ${{ secrets.PGP_KMS_KEY }}
      PGP_KMS_HASH:  ${{ secrets.PGP_KMS_HASH }}
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_RELEASE_ACCESS_KEY_ID: ${{ secrets.AWS_RELEASE_ACCESS_KEY_ID }}
      AWS_RELEASE_SECRET_ACCESS_KEY: ${{ secrets.AWS_RELEASE_SECRET_ACCESS_KEY }}
    permissions:
      id-token: write
      attestations: write
      contents: read

  build-polkadot-omni-node-binary:
    needs: [validate-inputs]
    if: ${{ inputs.binary == 'polkadot-omni-node' || inputs.binary == 'all' }}
    uses: "./.github/workflows/release-reusable-rc-build.yml"
    with:
      binary: '["polkadot-omni-node"]'
      package: "polkadot-omni-node"
      release_tag: ${{ needs.validate-inputs.outputs.release_tag }}
      target: x86_64-unknown-linux-gnu
      features: runtime-benchmarks
    secrets:
      PGP_KMS_KEY:  ${{ secrets.PGP_KMS_KEY }}
      PGP_KMS_HASH:  ${{ secrets.PGP_KMS_HASH }}
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_RELEASE_ACCESS_KEY_ID: ${{ secrets.AWS_RELEASE_ACCESS_KEY_ID }}
      AWS_RELEASE_SECRET_ACCESS_KEY: ${{ secrets.AWS_RELEASE_SECRET_ACCESS_KEY }}
    permissions:
      id-token: write
      attestations: write
      contents: read

  build-frame-omni-bencher-binary:
    needs: [validate-inputs]
    if: ${{ inputs.binary == 'frame-omni-bencher' || inputs.binary == 'all' }}
    uses: "./.github/workflows/release-reusable-rc-build.yml"
    with:
      binary: '["frame-omni-bencher"]'
      package: "frame-omni-bencher"
      release_tag: ${{ needs.validate-inputs.outputs.release_tag }}
      target: x86_64-unknown-linux-gnu
    secrets:
      PGP_KMS_KEY:  ${{ secrets.PGP_KMS_KEY }}
      PGP_KMS_HASH:  ${{ secrets.PGP_KMS_HASH }}
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_RELEASE_ACCESS_KEY_ID: ${{ secrets.AWS_RELEASE_ACCESS_KEY_ID }}
      AWS_RELEASE_SECRET_ACCESS_KEY: ${{ secrets.AWS_RELEASE_SECRET_ACCESS_KEY }}
    permissions:
      id-token: write
      attestations: write
      contents: read

  build-chain-spec-builder-binary:
    needs: [validate-inputs]
    if: ${{ inputs.binary == 'chain-spec-builder' || inputs.binary == 'all' }}
    uses: "./.github/workflows/release-reusable-rc-build.yml"
    with:
      binary: '["chain-spec-builder"]'
      package: staging-chain-spec-builder
      release_tag: ${{ needs.validate-inputs.outputs.release_tag }}
      target: x86_64-unknown-linux-gnu
    secrets:
      PGP_KMS_KEY:  ${{ secrets.PGP_KMS_KEY }}
      PGP_KMS_HASH:  ${{ secrets.PGP_KMS_HASH }}
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_RELEASE_ACCESS_KEY_ID: ${{ secrets.AWS_RELEASE_ACCESS_KEY_ID }}
      AWS_RELEASE_SECRET_ACCESS_KEY: ${{ secrets.AWS_RELEASE_SECRET_ACCESS_KEY }}
    permissions:
      id-token: write
      attestations: write
      contents: read

  build-substrate-node-binary:
    needs: [validate-inputs]
    if: ${{ inputs.binary == 'substrate-node' || inputs.binary == 'all' }}
    uses: "./.github/workflows/release-reusable-rc-build.yml"
    with:
      binary: '["substrate-node"]'
      package: staging-node-cli
      release_tag: ${{ needs.validate-inputs.outputs.release_tag }}
      target: x86_64-unknown-linux-gnu
    secrets:
      PGP_KMS_KEY:  ${{ secrets.PGP_KMS_KEY }}
      PGP_KMS_HASH:  ${{ secrets.PGP_KMS_HASH }}
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_RELEASE_ACCESS_KEY_ID: ${{ secrets.AWS_RELEASE_ACCESS_KEY_ID }}
      AWS_RELEASE_SECRET_ACCESS_KEY: ${{ secrets.AWS_RELEASE_SECRET_ACCESS_KEY }}
    permissions:
      id-token: write
      attestations: write
      contents: read

  build-eth-rpc-binary:
    needs: [validate-inputs]
    if: ${{ inputs.binary == 'eth-rpc' || inputs.binary == 'all' }}
    uses: "./.github/workflows/release-reusable-rc-build.yml"
    with:
      binary: '["eth-rpc"]'
      package: pallet-revive-eth-rpc
      release_tag: ${{ needs.validate-inputs.outputs.release_tag }}
      target: x86_64-unknown-linux-gnu
    secrets:
      PGP_KMS_KEY:  ${{ secrets.PGP_KMS_KEY }}
      PGP_KMS_HASH:  ${{ secrets.PGP_KMS_HASH }}
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_RELEASE_ACCESS_KEY_ID: ${{ secrets.AWS_RELEASE_ACCESS_KEY_ID }}
      AWS_RELEASE_SECRET_ACCESS_KEY: ${{ secrets.AWS_RELEASE_SECRET_ACCESS_KEY }}
    permissions:
      id-token: write
      attestations: write
      contents: read

  build-polkadot-macos-binary:
    needs: [validate-inputs]
    if: ${{ inputs.binary == 'polkadot' || inputs.binary == 'all' }}
    uses: "./.github/workflows/release-reusable-rc-build.yml"
    with:
      binary: '["polkadot", "polkadot-prepare-worker", "polkadot-execute-worker"]'
      package: polkadot
      release_tag: ${{ needs.validate-inputs.outputs.release_tag }}
      target: aarch64-apple-darwin
    secrets:
      PGP_KMS_KEY:  ${{ secrets.PGP_KMS_KEY }}
      PGP_KMS_HASH:  ${{ secrets.PGP_KMS_HASH }}
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_RELEASE_ACCESS_KEY_ID: ${{ secrets.AWS_RELEASE_ACCESS_KEY_ID }}
      AWS_RELEASE_SECRET_ACCESS_KEY: ${{ secrets.AWS_RELEASE_SECRET_ACCESS_KEY }}
    permissions:
      id-token: write
      attestations: write
      contents: read

  build-polkadot-parachain-macos-binary:
    needs: [validate-inputs]
    if: ${{ inputs.binary == 'polkadot-parachain' || inputs.binary == 'all' }}
    uses: "./.github/workflows/release-reusable-rc-build.yml"
    with:
      binary: '["polkadot-parachain"]'
      package: polkadot-parachain-bin
      release_tag: ${{ needs.validate-inputs.outputs.release_tag }}
      target: aarch64-apple-darwin
    secrets:
      PGP_KMS_KEY:  ${{ secrets.PGP_KMS_KEY }}
      PGP_KMS_HASH:  ${{ secrets.PGP_KMS_HASH }}
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_RELEASE_ACCESS_KEY_ID: ${{ secrets.AWS_RELEASE_ACCESS_KEY_ID }}
      AWS_RELEASE_SECRET_ACCESS_KEY: ${{ secrets.AWS_RELEASE_SECRET_ACCESS_KEY }}
    permissions:
      id-token: write
      attestations: write
      contents: read

  build-polkadot-omni-node-macos-binary:
    needs: [validate-inputs]
    if: ${{ inputs.binary == 'polkadot-omni-node' || inputs.binary == 'all' }}
    uses: "./.github/workflows/release-reusable-rc-build.yml"
    with:
      binary: '["polkadot-omni-node"]'
      package: polkadot-omni-node
      release_tag: ${{ needs.validate-inputs.outputs.release_tag }}
      target: aarch64-apple-darwin
      features: runtime-benchmarks
    secrets:
      PGP_KMS_KEY:  ${{ secrets.PGP_KMS_KEY }}
      PGP_KMS_HASH:  ${{ secrets.PGP_KMS_HASH }}
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_RELEASE_ACCESS_KEY_ID: ${{ secrets.AWS_RELEASE_ACCESS_KEY_ID }}
      AWS_RELEASE_SECRET_ACCESS_KEY: ${{ secrets.AWS_RELEASE_SECRET_ACCESS_KEY }}
    permissions:
      id-token: write
      attestations: write
      contents: read

  build-frame-omni-bencher-macos-binary:
    needs: [validate-inputs]
    if: ${{ inputs.binary == 'frame-omni-bencher' || inputs.binary == 'all' }}
    uses: "./.github/workflows/release-reusable-rc-build.yml"
    with:
      binary: '["frame-omni-bencher"]'
      package: frame-omni-bencher
      release_tag: ${{ needs.validate-inputs.outputs.release_tag }}
      target: aarch64-apple-darwin
    secrets:
      PGP_KMS_KEY:  ${{ secrets.PGP_KMS_KEY }}
      PGP_KMS_HASH:  ${{ secrets.PGP_KMS_HASH }}
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_RELEASE_ACCESS_KEY_ID: ${{ secrets.AWS_RELEASE_ACCESS_KEY_ID }}
      AWS_RELEASE_SECRET_ACCESS_KEY: ${{ secrets.AWS_RELEASE_SECRET_ACCESS_KEY }}
    permissions:
      id-token: write
      attestations: write
      contents: read

  build-chain-spec-builder-macos-binary:
    needs: [validate-inputs]
    if: ${{ inputs.binary == 'chain-spec-builder' || inputs.binary == 'all' }}
    uses: "./.github/workflows/release-reusable-rc-build.yml"
    with:
      binary: '["chain-spec-builder"]'
      package: staging-chain-spec-builder
      release_tag: ${{ needs.validate-inputs.outputs.release_tag }}
      target: aarch64-apple-darwin
    secrets:
      PGP_KMS_KEY:  ${{ secrets.PGP_KMS_KEY }}
      PGP_KMS_HASH:  ${{ secrets.PGP_KMS_HASH }}
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_RELEASE_ACCESS_KEY_ID: ${{ secrets.AWS_RELEASE_ACCESS_KEY_ID }}
      AWS_RELEASE_SECRET_ACCESS_KEY: ${{ secrets.AWS_RELEASE_SECRET_ACCESS_KEY }}
    permissions:
      id-token: write
      attestations: write
      contents: read

  build-substrate-node-macos-binary:
    needs: [validate-inputs]
    if: ${{ inputs.binary == 'substrate-node' || inputs.binary == 'all' }}
    uses: "./.github/workflows/release-reusable-rc-build.yml"
    with:
      binary: '["substrate-node"]'
      package: staging-node-cli
      release_tag: ${{ needs.validate-inputs.outputs.release_tag }}
      target: aarch64-apple-darwin
    secrets:
      PGP_KMS_KEY:  ${{ secrets.PGP_KMS_KEY }}
      PGP_KMS_HASH:  ${{ secrets.PGP_KMS_HASH }}
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_RELEASE_ACCESS_KEY_ID: ${{ secrets.AWS_RELEASE_ACCESS_KEY_ID }}
      AWS_RELEASE_SECRET_ACCESS_KEY: ${{ secrets.AWS_RELEASE_SECRET_ACCESS_KEY }}
    permissions:
      id-token: write
      attestations: write
      contents: read

  build-eth-rpc-macos-binary:
    needs: [validate-inputs]
    if: ${{ inputs.binary == 'eth-rpc' || inputs.binary == 'all' }}
    uses: "./.github/workflows/release-reusable-rc-build.yml"
    with:
      binary: '["eth-rpc"]'
      package: pallet-revive-eth-rpc
      release_tag: ${{ needs.validate-inputs.outputs.release_tag }}
      target: aarch64-apple-darwin
    secrets:
      PGP_KMS_KEY:  ${{ secrets.PGP_KMS_KEY }}
      PGP_KMS_HASH:  ${{ secrets.PGP_KMS_HASH }}
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_RELEASE_ACCESS_KEY_ID: ${{ secrets.AWS_RELEASE_ACCESS_KEY_ID }}
      AWS_RELEASE_SECRET_ACCESS_KEY: ${{ secrets.AWS_RELEASE_SECRET_ACCESS_KEY }}
    permissions:
      id-token: write
      attestations: write
      contents: read

  trigger-release-draft:
    needs:
      - build-runtimes
      - build-polkadot-binary
      - build-polkadot-parachain-binary
      - build-polkadot-omni-node-binary
      - build-frame-omni-bencher-binary
      - build-chain-spec-builder-binary
      - build-substrate-node-binary
      - build-eth-rpc-binary
      - build-polkadot-macos-binary
      - build-polkadot-parachain-macos-binary
      - build-polkadot-omni-node-macos-binary
      - build-frame-omni-bencher-macos-binary
      - build-chain-spec-builder-macos-binary
      - build-substrate-node-macos-binary
      - build-eth-rpc-macos-binary
      - validate-inputs
    runs-on: ubuntu-latest
    steps:
      - name: Generate content write token for the release automation
        id: generate_write_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.POLKADOT_SDK_RELEASE_RW_APP_ID }}
          private-key: ${{ secrets.POLKADOT_SDK_RELEASE_RW_APP_KEY }}
          owner: paritytech
          repositories: polkadot-sdk

      - name: Trigger publish_release_draft workflow
        env:
          GITHUB_TOKEN: ${{ steps.generate_write_token.outputs.token }}
        run: |
          gh workflow run .github/workflows/release-30_publish_release_draft.yml \
            --repo ${{ github.repository }} \
            --ref ${{ github.ref }} \
            -f release_tag=${{ needs.validate-inputs.outputs.release_tag }} \
            -f build_run_id=${{ github.run_id }} \
            -f runtimes='${{ needs.build-runtimes.outputs.published_runtimes }}'
