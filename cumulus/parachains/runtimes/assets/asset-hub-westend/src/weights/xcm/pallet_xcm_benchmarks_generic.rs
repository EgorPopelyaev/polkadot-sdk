// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_xcm_benchmarks::generic`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
<<<<<<< HEAD
//! DATE: 2025-03-25, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `3c24194516f3`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
=======
//! DATE: 2025-04-05, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `0af6a34749d7`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
//! WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/production/wbuild/asset-hub-westend-runtime/asset_hub_westend_runtime.wasm
// --pallet=pallet_xcm_benchmarks::generic
// --header=/__w/polkadot-sdk/polkadot-sdk/cumulus/file_header.txt
// --output=./cumulus/parachains/runtimes/assets/asset-hub-westend/src/weights/xcm
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096
// --template=cumulus/templates/xcm-bench-template.hbs
// --no-storage-info
// --no-min-squares
// --no-median-slopes

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weights for `pallet_xcm_benchmarks::generic`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo<T> {
	// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `ParachainSystem::UpwardDeliveryFeeFactor` (r:1 w:0)
	// Proof: `ParachainSystem::UpwardDeliveryFeeFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `PolkadotXcm::SupportedVersion` (r:1 w:0)
	// Proof: `PolkadotXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
	// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
	// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	pub fn report_holding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `212`
		//  Estimated: `6196`
<<<<<<< HEAD
		// Minimum execution time: 100_738_000 picoseconds.
		Weight::from_parts(102_746_000, 6196)
=======
		// Minimum execution time: 103_614_000 picoseconds.
		Weight::from_parts(107_306_000, 6196)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	pub fn buy_execution() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
<<<<<<< HEAD
		//  Estimated: `0`
		// Minimum execution time: 653_000 picoseconds.
		Weight::from_parts(721_000, 0)
=======
		//  Estimated: `3593`
		// Minimum execution time: 7_998_000 picoseconds.
		Weight::from_parts(8_489_000, 3593)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	pub fn pay_fees() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3593`
<<<<<<< HEAD
		// Minimum execution time: 6_108_000 picoseconds.
		Weight::from_parts(6_562_000, 3593)
=======
		// Minimum execution time: 6_293_000 picoseconds.
		Weight::from_parts(6_672_000, 3593)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	pub fn asset_claimer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 658_000 picoseconds.
		Weight::from_parts(706_000, 0)
=======
		// Minimum execution time: 782_000 picoseconds.
		Weight::from_parts(839_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	// Storage: `PolkadotXcm::Queries` (r:1 w:0)
	// Proof: `PolkadotXcm::Queries` (`max_values`: None, `max_size`: None, mode: `Measured`)
	pub fn query_response() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3465`
<<<<<<< HEAD
		// Minimum execution time: 5_712_000 picoseconds.
		Weight::from_parts(5_871_000, 3465)
=======
		// Minimum execution time: 5_635_000 picoseconds.
		Weight::from_parts(5_973_000, 3465)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	pub fn transact() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 6_836_000 picoseconds.
		Weight::from_parts(7_253_000, 0)
=======
		// Minimum execution time: 7_331_000 picoseconds.
		Weight::from_parts(7_532_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	pub fn refund_surplus() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 2_778_000 picoseconds.
		Weight::from_parts(2_969_000, 0)
=======
		// Minimum execution time: 2_839_000 picoseconds.
		Weight::from_parts(3_034_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	pub fn set_error_handler() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 651_000 picoseconds.
		Weight::from_parts(717_000, 0)
=======
		// Minimum execution time: 747_000 picoseconds.
		Weight::from_parts(802_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	pub fn set_appendix() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 654_000 picoseconds.
		Weight::from_parts(715_000, 0)
=======
		// Minimum execution time: 727_000 picoseconds.
		Weight::from_parts(787_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	pub fn clear_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 635_000 picoseconds.
		Weight::from_parts(688_000, 0)
=======
		// Minimum execution time: 717_000 picoseconds.
		Weight::from_parts(771_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	pub fn descend_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 708_000 picoseconds.
		Weight::from_parts(742_000, 0)
=======
		// Minimum execution time: 757_000 picoseconds.
		Weight::from_parts(822_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	// Storage: `Benchmark::Override` (r:0 w:0)
	// Proof: `Benchmark::Override` (`max_values`: None, `max_size`: None, mode: `Measured`)
	pub fn execute_with_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 18_446_744_073_709_551_000 picoseconds.
		Weight::from_parts(18_446_744_073_709_551_000, 0)
	}
	pub fn clear_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 694_000 picoseconds.
		Weight::from_parts(731_000, 0)
=======
		// Minimum execution time: 735_000 picoseconds.
		Weight::from_parts(788_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `ParachainSystem::UpwardDeliveryFeeFactor` (r:1 w:0)
	// Proof: `ParachainSystem::UpwardDeliveryFeeFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `PolkadotXcm::SupportedVersion` (r:1 w:0)
	// Proof: `PolkadotXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
	// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
	// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	pub fn report_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `212`
		//  Estimated: `6196`
<<<<<<< HEAD
		// Minimum execution time: 67_336_000 picoseconds.
		Weight::from_parts(69_034_000, 6196)
=======
		// Minimum execution time: 68_640_000 picoseconds.
		Weight::from_parts(70_050_000, 6196)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: `PolkadotXcm::AssetTraps` (r:1 w:1)
	// Proof: `PolkadotXcm::AssetTraps` (`max_values`: None, `max_size`: None, mode: `Measured`)
	pub fn claim_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `23`
		//  Estimated: `3488`
<<<<<<< HEAD
		// Minimum execution time: 8_830_000 picoseconds.
		Weight::from_parts(9_038_000, 3488)
=======
		// Minimum execution time: 8_891_000 picoseconds.
		Weight::from_parts(9_210_000, 3488)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	pub fn trap() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 3_234_000 picoseconds.
		Weight::from_parts(3_353_000, 0)
=======
		// Minimum execution time: 3_247_000 picoseconds.
		Weight::from_parts(3_479_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	// Storage: `PolkadotXcm::VersionNotifyTargets` (r:1 w:1)
	// Proof: `PolkadotXcm::VersionNotifyTargets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainSystem::UpwardDeliveryFeeFactor` (r:1 w:0)
	// Proof: `ParachainSystem::UpwardDeliveryFeeFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `PolkadotXcm::SupportedVersion` (r:1 w:0)
	// Proof: `PolkadotXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
	// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
	// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	pub fn subscribe_version() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3507`
<<<<<<< HEAD
		// Minimum execution time: 22_885_000 picoseconds.
		Weight::from_parts(23_427_000, 3507)
=======
		// Minimum execution time: 22_866_000 picoseconds.
		Weight::from_parts(23_629_000, 3507)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `PolkadotXcm::VersionNotifyTargets` (r:0 w:1)
	// Proof: `PolkadotXcm::VersionNotifyTargets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	pub fn unsubscribe_version() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 2_729_000 picoseconds.
		Weight::from_parts(2_904_000, 0)
=======
		// Minimum execution time: 2_928_000 picoseconds.
		Weight::from_parts(3_033_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	pub fn burn_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 23_298_000 picoseconds.
		Weight::from_parts(23_607_000, 0)
=======
		// Minimum execution time: 23_095_000 picoseconds.
		Weight::from_parts(23_613_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	pub fn expect_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 6_698_000 picoseconds.
		Weight::from_parts(6_845_000, 0)
=======
		// Minimum execution time: 6_766_000 picoseconds.
		Weight::from_parts(6_918_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	pub fn expect_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 3_110_000 picoseconds.
		Weight::from_parts(3_347_000, 0)
=======
		// Minimum execution time: 3_339_000 picoseconds.
		Weight::from_parts(3_560_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	pub fn expect_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 3_211_000 picoseconds.
		Weight::from_parts(3_368_000, 0)
=======
		// Minimum execution time: 3_337_000 picoseconds.
		Weight::from_parts(3_543_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	pub fn expect_transact_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 759_000 picoseconds.
		Weight::from_parts(853_000, 0)
=======
		// Minimum execution time: 875_000 picoseconds.
		Weight::from_parts(944_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `ParachainSystem::UpwardDeliveryFeeFactor` (r:1 w:0)
	// Proof: `ParachainSystem::UpwardDeliveryFeeFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `PolkadotXcm::SupportedVersion` (r:1 w:0)
	// Proof: `PolkadotXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
	// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
	// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	pub fn query_pallet() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `212`
		//  Estimated: `6196`
<<<<<<< HEAD
		// Minimum execution time: 73_562_000 picoseconds.
		Weight::from_parts(76_153_000, 6196)
=======
		// Minimum execution time: 74_710_000 picoseconds.
		Weight::from_parts(77_414_000, 6196)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	pub fn expect_pallet() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 5_209_000 picoseconds.
		Weight::from_parts(5_363_000, 0)
=======
		// Minimum execution time: 5_491_000 picoseconds.
		Weight::from_parts(5_699_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `ParachainSystem::UpwardDeliveryFeeFactor` (r:1 w:0)
	// Proof: `ParachainSystem::UpwardDeliveryFeeFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `PolkadotXcm::SupportedVersion` (r:1 w:0)
	// Proof: `PolkadotXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
	// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
	// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	pub fn report_transact_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `212`
		//  Estimated: `6196`
<<<<<<< HEAD
		// Minimum execution time: 67_567_000 picoseconds.
		Weight::from_parts(69_822_000, 6196)
=======
		// Minimum execution time: 68_452_000 picoseconds.
		Weight::from_parts(70_643_000, 6196)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	pub fn clear_transact_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 696_000 picoseconds.
		Weight::from_parts(747_000, 0)
=======
		// Minimum execution time: 760_000 picoseconds.
		Weight::from_parts(832_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	pub fn set_topic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 631_000 picoseconds.
		Weight::from_parts(685_000, 0)
=======
		// Minimum execution time: 727_000 picoseconds.
		Weight::from_parts(778_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	pub fn clear_topic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 617_000 picoseconds.
		Weight::from_parts(689_000, 0)
=======
		// Minimum execution time: 729_000 picoseconds.
		Weight::from_parts(776_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `ForeignAssets::Asset` (r:1 w:1)
	// Proof: `ForeignAssets::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	// Storage: `ForeignAssets::Account` (r:1 w:1)
	// Proof: `ForeignAssets::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	// Storage: `ForeignAssetsFreezer::FrozenBalances` (r:1 w:0)
	// Proof: `ForeignAssetsFreezer::FrozenBalances` (`max_values`: None, `max_size`: Some(682), added: 3157, mode: `MaxEncodedLen`)
	pub fn exchange_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `498`
		//  Estimated: `4273`
<<<<<<< HEAD
		// Minimum execution time: 81_324_000 picoseconds.
		Weight::from_parts(83_920_000, 4273)
=======
		// Minimum execution time: 83_321_000 picoseconds.
		Weight::from_parts(86_103_000, 4273)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
	// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	pub fn universal_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `69`
		//  Estimated: `1489`
<<<<<<< HEAD
		// Minimum execution time: 5_200_000 picoseconds.
		Weight::from_parts(5_384_000, 1489)
=======
		// Minimum execution time: 5_230_000 picoseconds.
		Weight::from_parts(5_429_000, 1489)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	pub fn set_fees_mode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 642_000 picoseconds.
		Weight::from_parts(691_000, 0)
=======
		// Minimum execution time: 737_000 picoseconds.
		Weight::from_parts(780_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	pub fn unpaid_execution() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 666_000 picoseconds.
		Weight::from_parts(718_000, 0)
=======
		// Minimum execution time: 759_000 picoseconds.
		Weight::from_parts(825_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
	pub fn alias_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
<<<<<<< HEAD
		// Minimum execution time: 676_000 picoseconds.
		Weight::from_parts(738_000, 0)
=======
		// Minimum execution time: 780_000 picoseconds.
		Weight::from_parts(854_000, 0)
>>>>>>> 07827930 (Use original pr name in prdoc check (#60))
	}
}
